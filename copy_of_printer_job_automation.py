# -*- coding: utf-8 -*-
"""Copy of Printer job automation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Y_Y9GhRgwSL6lOxhCUUHSOmQh3MGz55f
"""

import numpy as np
import pandas as pd

"""**Data Loading**"""

df_printer1 = pd.read_csv("Printer job automation_csv_2nd draft.csv")

"""**Reasoning**:
checking to confirm the data


"""

df_printer1.head()

df_printer1.columns

df_printer1.shape

"""Dropping Analyis tab from the dataframe"""

df_printer1 = df_printer1.drop("Analysis",axis=1)

df_printer1.columns

# creating a function to get the extension of the job name mentioned in spreadsheet

import os

def get_extension(job_name):
    job_name = str(job_name)  # Convert to string if not already
    _, ext = os.path.splitext(job_name)  # Extract extension
    return ext.lower() if ext else "no_extension"

extension_mapping = {
    ".pdf": "PDF Document",
    ".jpg": "Image File",
    ".png": "Image File",
    ".docx": "Microsoft Word Document",
    ".doc": "Microsoft Word Document",
    ".docx": "Microsoft Word Document",
    ".tmp": "Temporary System File",
    ".pptx": "Presentation Document",
    ".xls": "Excel Spreadsheet",
    ".xlsx": "Excel Spreadsheet",
    ".xlsm": "Excel Spreadsheet",
    ".xlsb": "Excel Spreadsheet",
    ".txt": "Text Document",
    ".csv": "Data File",
    ".zip": "Compressed File",
    ".log": "Log File",
    ".html": "Web Page",
    ".snagx" : "Snagit screen capture software",
    ".php": "PHP Script",
    ".oxps":"Open XML Paper Specification",
    ".asp" : "Active Server Page Extended file",
    ".ashx" : "Active Server Page Extended file",
    ".aspx" : "Active Server Page Extended file",
    }

# Classification Mapping (Example)
job_classification_dict = {
    "email job": "Email Print Job",
    "microsoft outlook - memo style": "Email Print Job",
    "qualification summary eSig Rpt": "System-Generated Report",
    "_flNUQVRFPTMwNzUwLjA0My4wNi4wMQ==": "System-Generated Report",
    "_Microsoft Word Document": "Microsoft Word Document",
    "Microsoft PowerPoint" : "Presentation Document",
    "document1.doc": "Microsoft Word Document",
    "randomfile.tmp": "Temporary System File",
    "report_final.pdf": "PDF Document",
    "meeting agenda.docx": "Microsoft Word Document",
    "scanneddocument.pdf": "Scanned PDF Document",
    "system_log_123.tmp": "Temporary System File",
    "presentation slides.pptx": "Presentation Document"
}

# Define job classification patterns (matches text anywhere in job name)
pattern_classification_dict = {
    "email job": "Email",
    "microsoft outlook": "Email Print Job",
    "Rep_Outgoing_doc" : "document",
    "Copy job" : "document",
    "qualification summary": "System-Generated Report",
    "notepad": "Notepad Document",
    "Microsoft Word": "Microsoft Word Document",
    "Microsoft word": "Microsoft Word Document",
    "microsoft word frm" : "Microsoft Word Document",
    "Microsoft PowerPoint" : "Presentation Document",
    "_Microsoft": "Microsoft Word Document",
     "document": "Microsoft Word Document",
    "scan": "Scanned Document",
    "log": "System Log File",
    "error log": "System Log File",
    "presentation": "Presentation Document",
    "report": "Financial Report",
    "invoice": "Billing Document",
    "billing": "Billing Document",
    "summary": "System-Generated Report"
}

# Classifying the job

def classify_job(job_name):
    job_name = str(job_name)
    job_name_lower = job_name.lower()

    # check extension
    ext = get_extension(job_name)
    if ext in extension_mapping:
        return extension_mapping[ext]

    # First, check if the job is in our dictionary
    # First: check full job_classification_dict (exact match)
    for key in job_classification_dict:
        if key.lower() == job_name_lower:
            return job_classification_dict[key]

    # Check if any pattern appears in the job name
    # Then: check pattern-based match (substring match)
    for pattern in pattern_classification_dict:
        if pattern.lower() in job_name_lower:
            return pattern_classification_dict[pattern]
    # if not in extension , check for patterns
    #for pattern, category in pattern_classification_dict.items():
       # if pattern in job_name_lower:
         #return category

    # If all else fails, mark as "Other"
    return "Other"

df_printer1["FileExtension"] = df_printer1["JobName"].apply(get_extension)
df_printer1["JobCategory"] = df_printer1["JobName"].apply(classify_job)
#df_printer1["JobCategory"] = df_printer1["JobCategory"].apply(pattern_classification_dict)

# Display the categorized data
#import ace_tools as tools
#tools.display_dataframe_to_user(name="Classified Print Jobs", dataframe=df_printer.head(50))

#df_printer1["JobCategory"] = df_printer1["JobName"].apply(normalize_job_name)

df_printer1.groupby("JobCategory").count()

df_printer1.to_csv("classified_print_jobs.csv", index=False)